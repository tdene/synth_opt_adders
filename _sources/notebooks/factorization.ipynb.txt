{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/tdene/synth_opt_adders/blob/master/docs/notebooks/factorization.ipynb)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "6ay6u3jUsjyi",
    "tags": []
   },
   "source": [
    "# Adder-specific optimizations [Factorization]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "WMNxmq1yspm-"
   },
   "source": [
    "**NOTE**: This is a work in progress and will not be functional until version **1.1.0** of the library"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "mPu8tKO7QL73",
    "jp-MarkdownHeadingCollapsed": true,
    "tags": []
   },
   "source": [
    "## Setup (RUN ME before executing any code in this section)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "h4Hyo7o3QL7_",
    "outputId": "5a6a69b0-fe27-41af-dda5-55c2296390dc"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
      "Collecting git+https://github.com/tdene/synth_opt_adders.git\n",
      "  Cloning https://github.com/tdene/synth_opt_adders.git to /tmp/pip-req-build-4pvpenzv\n",
      "  Running command git clone -q https://github.com/tdene/synth_opt_adders.git /tmp/pip-req-build-4pvpenzv\n",
      "Requirement already satisfied: networkx in /usr/local/lib/python3.7/dist-packages (from pptrees==1.0.5) (2.6.3)\n",
      "Requirement already satisfied: pydot in /usr/local/lib/python3.7/dist-packages (from pptrees==1.0.5) (1.3.0)\n",
      "Requirement already satisfied: graphviz in /usr/local/lib/python3.7/dist-packages (from pptrees==1.0.5) (0.10.1)\n",
      "Requirement already satisfied: Pillow in /usr/local/lib/python3.7/dist-packages (from pptrees==1.0.5) (7.1.2)\n",
      "Requirement already satisfied: pyparsing>=2.1.4 in /usr/local/lib/python3.7/dist-packages (from pydot->pptrees==1.0.5) (3.0.9)\n",
      "Building wheels for collected packages: pptrees\n",
      "  Building wheel for pptrees (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
      "  Created wheel for pptrees: filename=pptrees-1.0.5-py3-none-any.whl size=62245 sha256=c042ce21a9183dcaa1826ec41c68cff6d0bba214e2d59ed9d85a27ed0dec851e\n",
      "  Stored in directory: /tmp/pip-ephem-wheel-cache-c2yzrpv7/wheels/46/ba/74/bbe32b722a1f52c3c3aa52fcbdb050975cb54826ed0e4f77cd\n",
      "Successfully built pptrees\n",
      "Installing collected packages: pptrees\n",
      "Successfully installed pptrees-1.0.5\n"
     ]
    }
   ],
   "source": [
    "!pip install --upgrade git+https://github.com/tdene/synth_opt_adders.git"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "tREql9XUQSp3"
   },
   "source": [
    "## Integrating the pre-processing logic into the tree"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "OGdFe8KUQSp7"
   },
   "source": [
    "The circuits shown so far consist of three parts:\n",
    "\n",
    "*   \"pre-processing\" logic, which encodes the inputs into an alternate form\n",
    "*   The main body of the tree, which computes the non-local aspect of the operation\n",
    "*   \"post-processing\" logic, which combines the non-local and local aspects of the operation\n",
    "\n",
    "The previous section shows a novel way of integrating the post-processing logic into the main body of the tree.\n",
    "\n",
    "Is there a way to integrate the pre-processing logic into the main body of the tree?\n",
    "\n",
    "In a way, yes, there is."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "F2EyjuORSLOK"
   },
   "source": [
    "## Ling factorization"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "DSyTX2PfSYty"
   },
   "source": [
    "An earlier section showed the following CMOS schematic of the â–  recurrence operator for addition:\n",
    "\n",
    "![](https://drive.google.com/uc?export=view&id=1O0v4RCn8GlN10Adtne98e0Ir0CU-Goqg)\n",
    "\n",
    "The section on the right is a two-input gate.<br>\n",
    "The section on the left is a three-input gate.<br>\n",
    "\n",
    "One of the inputs to that three-input gate can be factored off onto a parallel path.<br>\n",
    "Below are results of a spice simulation showing the effect this has on delay.\n",
    "\n",
    "![](https://drive.google.com/uc?export=view&id=1eTOBLmIOjD29-lLU9F1AemXIKTRNoeFq)\n",
    "\n",
    "Note however that moving logic onto a parallel path leads to increased area and power consumption, and vastly increased complexity which can ultimately eliminate the benefits of the delay reduction."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "1dOF9B5cVgQT"
   },
   "source": [
    "## What is the Ling factorization expressed in terms of trees?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "QZfDIFuqVoEB"
   },
   "source": [
    "This factorization can be seen as a stereoscopic composition of trees.\n",
    "\n",
    "Just like with 3D glasses, there is a red lens and a blue lens, and the images they create combine into the overall picture."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "dsafv1aPV7kd"
   },
   "source": [
    "Here is the blue lens:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "xAwsaWh9V9ey",
    "outputId": "4616ae50-994e-4db6-b807-27abe6cd0a1d"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<pptrees.AdderTree.AdderTree at 0x7f97371ff7c0>"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from pptrees.AdderTree import AdderTree as tree\n",
    "\n",
    "t = tree(5, start_point = 2, leaf_labels = [\"c\",\"g\",\"p\"])\n",
    "t"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "5nxv9Y17Xnom"
   },
   "source": [
    "Here is one possible red lens:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 386
    },
    "id": "ZCwtzWlaXgXm",
    "outputId": "f840a9d4-7af6-47cf-9338-c65f76b5b05e"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<pptrees.AdderTree.AdderTree at 0x7f96cfcdc610>"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from pptrees.AdderTree import AdderTree as tree\n",
    "\n",
    "t = tree(5, start_point = 6, leaf_labels = [\"c\",\"p\",\"p\"])\n",
    "t"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "8O51omwRX3B_"
   },
   "source": [
    "These two trees can be overlaid on top of each other, like transparencies on a projector screen.\n",
    "\n",
    "Their stereoscopic composition then gives rise to a new structure."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "i-xotLheYVH-"
   },
   "source": [
    "## Arbitrary combination of Ling and sparseness"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "WWXyx-r5YYas"
   },
   "source": [
    "The framework described thus far allows for arbitrary combinations of Ling and sparseness, whereas prior work only applies them in simple, regular, fashion.\n",
    "\n",
    "Such logic would be incredibly difficult to design by hand.<br>\n",
    "Luckily, a tool exists that can automatically do it."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "ExiZi83IZFTR"
   },
   "source": [
    "## Adder-specific?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "QbNF5c7HZFTS"
   },
   "source": [
    "Note that this optimization is not adder-specific, but instead can be applied to any operation where a similar factorization can be performed.\n",
    "\n",
    "A simple example is a leading-zero detection circuit."
   ]
  }
 ],
 "metadata": {
  "colab": {
   "collapsed_sections": [
    "fglMuqg2IhwY",
    "1N1c_svQeCdW",
    "-I6Saz6BeDjI",
    "ZifwpKl9fqlH",
    "JzFxvp3GhXbH",
    "9hOkTj9AoUCy",
    "F32qIc62MV8d",
    "0VgsCoMdlkgZ",
    "ymYEzG6wIYml",
    "560vj7Bjs7Ek",
    "UFTf-qwG3T2l",
    "Piw_VGGa3lQF",
    "_jlQDIUf5DEz",
    "iaoIEaT55EGh",
    "90naeS2p5E-c",
    "JHoKpd3uGbMD",
    "Foo8BgqhId6t",
    "K2cp8l1vJKDx",
    "MWsxqcbsJGI3",
    "sKdbsgBsJ3Ck",
    "v2gXSPukMRgx",
    "Y8CVeeNmJNy6",
    "FO3guxSpOVnb",
    "JEz97dTfOYI8",
    "z7E_1y33OupR",
    "u2FqdwRRSQwo",
    "2_DaCL98STcN",
    "PimPLC5VVHBp",
    "RLVsewY1XBVX",
    "gqd1ZtA7YsVp",
    "6ay6u3jUsjyi",
    "mPu8tKO7QL73",
    "tREql9XUQSp3",
    "F2EyjuORSLOK",
    "1dOF9B5cVgQT",
    "i-xotLheYVH-",
    "ExiZi83IZFTR",
    "Qi_YF3DBIkDu",
    "94Q1Hg1FZowt",
    "y7GNF3Y5Z1x0",
    "VE8B8IDkahUv",
    "Af8jG-Z69OLy",
    "JDppVA-B9hV9",
    "isS1p2zM-Wki",
    "LrCgNrIOCXDJ",
    "Sa5Ge_EIGKuT",
    "9K1e27IMOwLA",
    "hAzzPw5DKE6E",
    "wSGmsxNXKR-7",
    "p5spCQilqVSV",
    "yB-VgX8WM7W7",
    "eaKDikoPN0NN",
    "zYlv5cHGOmXI",
    "87jVABPITJQf",
    "qOxi-Qf3l2Kf",
    "y5W5HONDp5FC",
    "E5QzbZ7Mqxwx",
    "kohejP9Fuphx",
    "2JGKA6FmIoHy",
    "PXh3DM_PQNAf",
    "1_ZGmvyjQU9G",
    "SqkHjSIUQX2z",
    "NXG-puc1QasQ",
    "sZbM-5czQgAk",
    "gnKvwjz-RCzg",
    "1Uel2oBVhv1i",
    "3axXyluyhv1i",
    "DCkhy-7fhv1i",
    "ZZCEJMY5hv1j",
    "QZlekhsShv1j",
    "ETkDJuzti9L_"
   ],
   "name": "hardware_addition.ipynb",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
